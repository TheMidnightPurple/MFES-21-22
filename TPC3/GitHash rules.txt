sig Hash {}
abstract sig Object {
	hash : one Hash
}

sig Blob extends Object {}

sig Name {}
sig Tree extends Object {
	objects : Hash -> Name
}

sig Commit extends Object {
	tree : one Hash,
	parent : set Hash
}

pred Invs {
  
  	//1) Uma arvore não poder ter 2 objectos diferentes com o mesmo nome (Correta)
  	all t: Tree, n: Name | lone t.objects.n
  	
  	//2) Cada hash é um único objecto (Correta)
  	all o: Object | one o.hash 
  
  	//3a) Os objectos de uma árvore apenas podem ser um Blob ou outras Trees
  	all t: Tree | t.objects.Name = Blob.hash or t.objects.Name = Tree.hash
  
  	//3b) O Commit, em cada Tree, aponta para uma hash de um objecto tipo tree
  	all c: Commit | c.tree = Tree.hash
  
  	//3c) O Commit em cada parent aponta para hashs de objectos do tipo Commit
  	all c: Commit | c.parent 
  
  	//4a) Um commit não pode estar contido nos seus parents (Correta)
  	all c: Commit | c.hash not in c.parent
  
  	//4b) Uma Tree não pode estar contida nos seus objectos
  
  	//5a) Se 2 Trees teem os mesmos objectos, então são a mesma Tree
  	all t1: Tree, t2: Tree | t1.objects = t2.objects implies t1 = t2
  
  	//5b) Se 2 commits teem a mesma tree e os mesmos parents então são o mesmo commit (Correta)
  	all c1: Commit, c2: Commit | (c1.tree = c2.tree and c1.parent = c2.parent) implies c1 = c2
  	
  	
  
  	 
  
  
  
  
	// Specify the properties of the git object model inside this predicate

	// The number of points you will get is proportional to the number of correct properties.
	// To check how many points you have so far you can use the different commands. The maximum is 5 points.
	// Be careful to not overspecify! 
	// If not all possible git object models are allowed by your spec you get 0 points, even if you have some correct properties.
	// To check if you are not overspecifying you can use command AllModelsArePossible. 
	// If you are overspecifying this command will return a git object model that should be possible 
	// but that you spec is not currently accepting.
  
  
  	
  

}
